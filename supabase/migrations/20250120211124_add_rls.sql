create table "public"."groups" (
    "id" bigint primary key generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by" uuid default auth.uid(),
    "name" text not null
);

create table "public"."permissions" (
    "id" bigint primary key generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "created_by" uuid default auth.uid(),
    "name" text not null
);

create table "public"."group_permissions" (
    "created_at" timestamp with time zone not null default now(),
    "created_by" uuid default auth.uid(),
    "permission_id" bigint not null references public.permissions(id),
    "group_id" bigint not null references public.groups(id)
);

create table "public"."user_groups" (
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null references auth.users,
    "group_id" bigint not null references public.groups(id)
);

CREATE FUNCTION user_has_permission(permission_name text)
RETURNS boolean AS $$
DECLARE
    has_permission boolean;
BEGIN
    SELECT EXISTS (
        SELECT 1
        FROM "public"."user_groups" ug
        JOIN "public"."group_permissions" gp ON ug.group_id = gp.group_id
        JOIN "public"."permissions" p ON gp.permission_id = p.id
        WHERE ug.user_id = (select auth.uid()) AND p.name = permission_name
        LIMIT 1
    ) INTO has_permission;

    RETURN has_permission;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

alter table "public"."blob_tags" enable row level security;
alter table "public"."blobs" enable row level security;
alter table "public"."tags" enable row level security;
alter table "public"."groups" enable row level security;
alter table "public"."group_permissions" enable row level security;
alter table "public"."permissions" enable row level security;
alter table "public"."user_groups" enable row level security;

create policy "Allow everything for authenticated users"
on "public"."blob_tags"
for all
to authenticated
using (user_has_permission('all blob_tags'));


create policy "Allow authenticated users to see and edit their own blobs"
on "public"."blobs"
for all
to authenticated
using (user_has_permission('all blobs'));


create policy "Allow authenticated users to see and edit their own tags"
on "public"."tags"
for all
to authenticated
using (user_has_permission('all tags'));
