create table "public"."blob_tags" (
    "created_at" timestamp with time zone not null default now(),
    "blob_id" bigint not null,
    "tag_id" smallint not null
);


alter table "public"."blob_tags" enable row level security;

create table "public"."blobs" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid default auth.uid(),
    "uuid" uuid not null default gen_random_uuid(),
    "title" text,
    "url" text,
    "notes" text,
    "rating" smallint
);


alter table "public"."blobs" enable row level security;

create table "public"."tags" (
    "id" smallint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "alternative_names" text[],
    "parent_id" smallint,
    "name" text,
    "search_vector" tsvector,
    "color" text
);


alter table "public"."tags" enable row level security;

CREATE UNIQUE INDEX blob_tags_pkey ON public.blob_tags USING btree (blob_id, tag_id);

CREATE UNIQUE INDEX blobs_pkey ON public.blobs USING btree (id);

CREATE UNIQUE INDEX blobs_uuid_key ON public.blobs USING btree (uuid);

CREATE INDEX idx_blobs_uuid ON public.blobs USING btree (uuid);

CREATE UNIQUE INDEX tags_name_key ON public.tags USING btree (name);

CREATE UNIQUE INDEX tags_pkey ON public.tags USING btree (id);

alter table "public"."blob_tags" add constraint "blob_tags_pkey" PRIMARY KEY using index "blob_tags_pkey";

alter table "public"."blobs" add constraint "blobs_pkey" PRIMARY KEY using index "blobs_pkey";

alter table "public"."tags" add constraint "tags_pkey" PRIMARY KEY using index "tags_pkey";

alter table "public"."blob_tags" add constraint "blob_tags_blob_id_fkey" FOREIGN KEY (blob_id) REFERENCES blobs(id) ON DELETE CASCADE not valid;

alter table "public"."blob_tags" validate constraint "blob_tags_blob_id_fkey";

alter table "public"."blob_tags" add constraint "blob_tags_tag_id_fkey" FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE not valid;

alter table "public"."blob_tags" validate constraint "blob_tags_tag_id_fkey";

alter table "public"."blobs" add constraint "blobs_uuid_key" UNIQUE using index "blobs_uuid_key";

alter table "public"."tags" add constraint "tags_name_key" UNIQUE using index "tags_name_key";

alter table "public"."tags" add constraint "tags_parent_id_fkey" FOREIGN KEY (parent_id) REFERENCES tags(id) not valid;

alter table "public"."tags" validate constraint "tags_parent_id_fkey";

grant delete on table "public"."blob_tags" to "anon";

grant insert on table "public"."blob_tags" to "anon";

grant references on table "public"."blob_tags" to "anon";

grant select on table "public"."blob_tags" to "anon";

grant trigger on table "public"."blob_tags" to "anon";

grant truncate on table "public"."blob_tags" to "anon";

grant update on table "public"."blob_tags" to "anon";

grant delete on table "public"."blob_tags" to "authenticated";

grant insert on table "public"."blob_tags" to "authenticated";

grant references on table "public"."blob_tags" to "authenticated";

grant select on table "public"."blob_tags" to "authenticated";

grant trigger on table "public"."blob_tags" to "authenticated";

grant truncate on table "public"."blob_tags" to "authenticated";

grant update on table "public"."blob_tags" to "authenticated";

grant delete on table "public"."blob_tags" to "service_role";

grant insert on table "public"."blob_tags" to "service_role";

grant references on table "public"."blob_tags" to "service_role";

grant select on table "public"."blob_tags" to "service_role";

grant trigger on table "public"."blob_tags" to "service_role";

grant truncate on table "public"."blob_tags" to "service_role";

grant update on table "public"."blob_tags" to "service_role";

grant delete on table "public"."blobs" to "anon";

grant insert on table "public"."blobs" to "anon";

grant references on table "public"."blobs" to "anon";

grant select on table "public"."blobs" to "anon";

grant trigger on table "public"."blobs" to "anon";

grant truncate on table "public"."blobs" to "anon";

grant update on table "public"."blobs" to "anon";

grant delete on table "public"."blobs" to "authenticated";

grant insert on table "public"."blobs" to "authenticated";

grant references on table "public"."blobs" to "authenticated";

grant select on table "public"."blobs" to "authenticated";

grant trigger on table "public"."blobs" to "authenticated";

grant truncate on table "public"."blobs" to "authenticated";

grant update on table "public"."blobs" to "authenticated";

grant delete on table "public"."blobs" to "service_role";

grant insert on table "public"."blobs" to "service_role";

grant references on table "public"."blobs" to "service_role";

grant select on table "public"."blobs" to "service_role";

grant trigger on table "public"."blobs" to "service_role";

grant truncate on table "public"."blobs" to "service_role";

grant update on table "public"."blobs" to "service_role";

grant delete on table "public"."tags" to "anon";

grant insert on table "public"."tags" to "anon";

grant references on table "public"."tags" to "anon";

grant select on table "public"."tags" to "anon";

grant trigger on table "public"."tags" to "anon";

grant truncate on table "public"."tags" to "anon";

grant update on table "public"."tags" to "anon";

grant delete on table "public"."tags" to "authenticated";

grant insert on table "public"."tags" to "authenticated";

grant references on table "public"."tags" to "authenticated";

grant select on table "public"."tags" to "authenticated";

grant trigger on table "public"."tags" to "authenticated";

grant truncate on table "public"."tags" to "authenticated";

grant update on table "public"."tags" to "authenticated";

grant delete on table "public"."tags" to "service_role";

grant insert on table "public"."tags" to "service_role";

grant references on table "public"."tags" to "service_role";

grant select on table "public"."tags" to "service_role";

grant trigger on table "public"."tags" to "service_role";

grant truncate on table "public"."tags" to "service_role";

grant update on table "public"."tags" to "service_role";

create policy "Allow everything for authenticated users"
on "public"."blob_tags"
for all
to authenticated
using (true)
with check (true);


create policy "Allow everything for authenticated users"
on "public"."blobs"
for all
to authenticated
using (true)
with check (true);


create policy "Allow everything for authenticated users"
on "public"."tags"
for all
to authenticated
using (true)
with check (true);


-- Search functionality

CREATE OR REPLACE FUNCTION public.search_tags_by_prefix(prefix text)
 RETURNS SETOF tags
 LANGUAGE plpgsql
AS $function$
begin
  return query
  select * from tags where search_vector @@ to_tsquery(prefix || ':*');
end;
$function$
;

CREATE OR REPLACE FUNCTION public.tags_search_vector_update()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$BEGIN
    NEW.search_vector := to_tsvector(
        'english',
        coalesce(NEW.name, '') || ' ' ||
        coalesce(array_to_string(NEW.alternative_names, ' '), '')
    );
    RETURN NEW;
END;$function$
;

CREATE TRIGGER tsvectorupdate BEFORE INSERT OR UPDATE ON public.tags FOR EACH ROW EXECUTE FUNCTION tags_search_vector_update();
